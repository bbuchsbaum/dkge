% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dkge-fit.R
\name{dkge_fit}
\alias{dkge_fit}
\title{Fit a Design-Kernel Group Embedding (DKGE) model}
\usage{
dkge_fit(
  data,
  designs = NULL,
  K = NULL,
  Omega_list = NULL,
  w_method = c("mfa_sigma1", "energy", "none"),
  w_tau = 0.3,
  ridge = 0,
  rank = NULL,
  keep_X = FALSE,
  cpca_blocks = NULL,
  cpca_T = NULL,
  cpca_part = c("none", "design", "resid", "both"),
  cpca_ridge = 0,
  weights = NULL
)
}
\arguments{
\item{data}{`dkge_data` bundle (preferred) or a list of subject beta matrices.}

\item{designs}{Per-subject design matrices (ignored when `data` already carries
them). Columns must align with the effects encoded by `K`.}

\item{K}{qxq design kernel in effect space. Supply either a raw matrix or the
list returned by [design_kernel()].}

\item{Omega_list}{Optional per-subject spatial reliabilities/weights. Each
element may be `NULL` (no extra weighting), a numeric vector of length
`P_s` (diagonal weights for clusters/voxels), or a full `P_s x P_s` matrix
specifying custom covariance. These weights are applied both when
accumulating the compressed covariance and when computing MFA/energy block
normalisation.}

\item{w_method}{Subject-level weighting scheme.
* `"mfa_sigma1"` (default): inverse squared leading singular value of
  `K^{1/2} Btil_s Omega_s^{1/2}` (Multiple Factor Analysis scaling).
* `"energy"`: inverse Frobenius norm squared of the same block.
* `"none"`: disable block scaling (all weights = 1).}

\item{w_tau}{Shrinkage parameter (0..1) toward equal weights. 0 keeps the raw
weights, 1 forces equal weighting.}

\item{ridge}{Ridge regularization parameter (default 0).}

\item{rank}{Desired rank for the decomposition. If NULL, uses full rank.}

\item{keep_X}{Logical; when `TRUE`, store the concatenated training matrix
used to build the multiblock projection (can be large).}

\item{cpca_blocks}{Optional integer vector specifying which effect rows span
the CPCA design subspace. Ignored when `cpca_part = "none"` or when
`cpca_T` is provided.}

\item{cpca_T}{Optional qxq0 matrix giving the CPCA design basis explicitly.
When supplied it overrides `cpca_blocks`.}

\item{cpca_part}{Which CPCA-filtered component to estimate: `"none"` (default)
performs the standard DKGE fit; `"design"` uses only the CPCA design part;
`"resid"` uses the residual part; `"both"` fits the design part but also
stores the residual basis for inspection.}

\item{cpca_ridge}{Optional ridge added to the CPCA-filtered matrices before
eigen-decomposition.}

\item{weights}{Either `NULL` (default) to apply the weighting scheme specified
by `w_method`, or a [`dkge_weights()`] specification controlling additional
voxel/anchor-level weighting. When supplied, it must inherit from
`dkge_weights` and is resolved via [dkge_weights()].}
}
\value{
A fitted `dkge` object. When the \pkg{multivarious} package is installed
  the return value additionally inherits from `multiblock_biprojector`, making
  it compatible with the multivarious multiblock interface.
}
\description{
Fit a Design-Kernel Group Embedding (DKGE) model
}
