% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dkge-latent-clf.R
\name{dkge_cv_train_latent_classifier}
\alias{dkge_cv_train_latent_classifier}
\title{Cross-fitted linear classifiers in the DKGE latent space}
\usage{
dkge_cv_train_latent_classifier(
  fit,
  y,
  Z_by_subject = NULL,
  folds = 5,
  model = c("lda", "ridge_logit", "lsvm"),
  ridge = 0.001,
  level = c("subject", "sample"),
  standardize = TRUE
)
}
\arguments{
\item{fit}{Fitted `dkge` object.}

\item{y}{Either a factor of length `S` (subject-level labels) or a list of
length `S` supplying per-sample labels for each subject.}

\item{Z_by_subject}{Optional list of latent feature matrices
(`P_s x r`). When `NULL`, [dkge_project_clusters_to_latent()] is used.}

\item{folds}{Either an integer `K` or a `dkge_folds` object created with
[dkge_define_folds()].}

\item{model}{Binary classifier: `"lda"` (pooled covariance linear
discriminant, default), `"ridge_logit"` (ridge-penalised logistic
regression via glmnet when available), or `"lsvm"` (placeholder falling
back to LDA).}

\item{ridge}{Ridge penalty added to the pooled covariance matrix when using
LDA. Ensures numerical stability when the latent dimension is high.}

\item{level}{Training granularity: `"subject"` averages each subject's
clusters, while `"sample"` stacks all cluster samples from training
subjects.}

\item{standardize}{Logical; when `TRUE` (default) latent features are
standardised within each training fold before fitting. Stored weight
vectors are converted back to the original latent scale.}
}
\value{
An object of class `dkge_clf` containing fold models, per-subject
  weight vectors, and metadata required by downstream mapping utilities.
}
\description{
Trains a binary linear classifier on DKGE latent features using subject-level
folds (LOSO or K-fold). The result stores one weight vector \eqn{\beta^{(-s)}}
per held-out subject so downstream information-map routines can construct
bias-aware decoder or Haufe maps.
}
\examples{
\dontrun{
clf <- dkge_cv_train_latent_classifier(fit, y, folds = 5)
length(clf$beta_by_subject)
}
}
