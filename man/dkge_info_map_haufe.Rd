% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dkge-info-maps.R
\name{dkge_info_map_haufe}
\alias{dkge_info_map_haufe}
\title{Haufe-style encoding maps from latent classifiers}
\usage{
dkge_info_map_haufe(
  fit,
  clf,
  renderer,
  Z_by_subject = NULL,
  lambda = 0,
  to_vox = TRUE,
  inference = c("none", "signflip", "parametric")
)
}
\arguments{
\item{fit}{Fitted `dkge` object.}

\item{clf}{Cross-fitted classifier returned by
[dkge_cv_train_latent_classifier()].}

\item{renderer}{Renderer produced by [dkge_build_renderer()].}

\item{Z_by_subject}{Optional list of latent cluster features used to estimate
fold covariances when they are not stored in `clf`.}

\item{lambda}{Non-negative smoothing parameter applied via
[dkge_anchor_aggregate()].}

\item{to_vox}{Logical; when `TRUE` and a decoder is available in `renderer`,
a dense voxel map is produced.}

\item{inference}{One of `"none"`, `"signflip"`, or `"parametric"` specifying the
group inference routine applied to anchor maps.}
}
\value{
List mirroring [dkge_info_map_from_classifier()] with
  `meta$kind = "haufe"`.
}
\description{
Converts discriminative weights into encoding (activation) patterns in latent
space using the Haufe transform \eqn{a_z = \Sigma_{zz} \beta}, then projects
them to subject cluster space and through the renderer pipeline.
}
\examples{
\dontrun{
enc <- dkge_info_map_haufe(fit, clf, renderer, inference = "signflip")
}
}
